diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8aa44bbe8..a3870e8e1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -44,6 +44,7 @@ include(Utilities)
 include(Macros)
 
 project( CURL C )
+include(flags OPTIONAL)
 
 message(WARNING "the curl cmake build system is poorly maintained. Be aware")
 
@@ -102,10 +103,17 @@ if(ENABLE_THREADED_RESOLVER AND ENABLE_ARES)
 endif()
 
 if(ENABLE_ARES)
+  option(FIND_ARES_MODULE_PATH "Find c-ares in CMAKE_MODULE_PATH" OFF)
+  mark_as_advanced(FIND_ARES_MODULE_PATH)
   set(USE_ARES 1)
-  find_package(CARES REQUIRED)
+  if(FIND_ARES_MODULE_PATH)
+    find_package(usexp-CARES REQUIRED PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+    set(CARES_INCLUDE_DIR ${CARES_INCLUDE_DIRS})
+  else()
+    find_package(CARES REQUIRED)
+  endif()
   list(APPEND CURL_LIBS ${CARES_LIBRARY} )
-  set(CURL_LIBS ${CURL_LIBS} ${CARES_LIBRARY})
+  include_directories(${CARES_INCLUDE_DIR})
 endif()
 
 option(BUILD_DASHBOARD_REPORTS "Set to ON to activate reporting of cURL builds here http://www.cdash.org/CDashPublic/index.php?project=CURL" OFF)
@@ -303,7 +311,13 @@ set(HAVE_LIBCRYPTO OFF)
 set(HAVE_LIBSSL OFF)
 
 if(CMAKE_USE_OPENSSL)
-  find_package(OpenSSL)
+  option(CMAKE_USE_OPENSSL_MODULE_PATH "Find OpenSSL in CMAKE_MODULE_PATH." OFF)
+  mark_as_advanced(CMAKE_USE_OPENSSL_MODULE_PATH)
+  if(CMAKE_USE_OPENSSL_MODULE_PATH)
+    find_package(usexp-OpenSSL REQUIRED PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  else()
+    find_package(OpenSSL)
+  endif()
   if(OPENSSL_FOUND)
     list(APPEND CURL_LIBS ${OPENSSL_LIBRARIES})
     set(USE_OPENSSL ON)
@@ -431,7 +445,10 @@ if(NOT CURL_DISABLE_LDAPS)
 endif()
 
 # Check for idn
-check_library_exists_concat("idn" idna_to_ascii_lz HAVE_LIBIDN)
+option(ENABLE_LIBIDN "Set to ON to enable libidn support" ON)
+if(ENABLE_LIBIDN)
+  check_library_exists_concat("idn" idna_to_ascii_lz HAVE_LIBIDN)
+endif()
 
 # Check for symbol dlopen (same as HAVE_LIBDL)
 check_library_exists("${CURL_LIBS}" dlopen "" HAVE_DLOPEN)
@@ -441,7 +458,13 @@ set(HAVE_LIBZ OFF)
 set(HAVE_ZLIB_H OFF)
 set(HAVE_ZLIB OFF)
 if(CURL_ZLIB)
-  find_package(ZLIB QUIET)
+  option(CURL_ZLIB_MODULE_PATH "Find zlib in CMAKE_MODULE_PATH." OFF)
+  mark_as_advanced(CURL_ZLIB_MODULE_PATH)
+  if(CURL_ZLIB_MODULE_PATH)
+    find_package(usexp-ZLIB REQUIRED PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+  else()
+    find_package(ZLIB QUIET)
+  endif()
   if(ZLIB_FOUND)
     set(HAVE_ZLIB_H ON)
     set(HAVE_ZLIB ON)
@@ -459,7 +482,14 @@ set(HAVE_LIBSSH2 OFF)
 set(HAVE_LIBSSH2_H OFF)
 
 if(CMAKE_USE_LIBSSH2)
-  find_package(LibSSH2)
+  option(CMAKE_USE_LIBSSH2_MODULE_PATH "Find libSSH2 in CMAKE_MODULE_PATH." OFF)
+  mark_as_advanced(CMAKE_USE_LIBSSH2_MODULE_PATH)
+  if(CMAKE_USE_LIBSSH2_MODULE_PATH)
+    find_package(usexp-LibSSH2 REQUIRED PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+    set(LIBSSH2_INCLUDE_DIR ${LIBSSH2_INCLUDE_DIRS})
+  else()
+    find_package(LibSSH2)
+  endif()
   if(LIBSSH2_FOUND)
     list(APPEND CURL_LIBS ${LIBSSH2_LIBRARY})
     set(CMAKE_REQUIRED_LIBRARIES ${LIBSSH2_LIBRARY})
@@ -482,6 +512,8 @@ if(CMAKE_USE_LIBSSH2)
     check_function_exists(libssh2_session_handshake HAVE_LIBSSH2_SESSION_HANDSHAKE)
     set(CMAKE_EXTRA_INCLUDE_FILES "")
 
+    set(CMAKE_REQUIRED_INCLUDES)
+    set(CMAKE_REQUIRED_LIBRARIES)
   endif(LIBSSH2_FOUND)
 endif(CMAKE_USE_LIBSSH2)
 
@@ -1014,6 +1046,14 @@ function(TRANSFORM_MAKEFILE_INC INPUT_FILE OUTPUT_FILE)
 
 endfunction()
 
+if(NOT DEFINED CURL_VER)
+  set(CURL_VER ${CURL_VERSION})
+elseif(NOT ${CURL_VER} STREQUAL ${CURL_VERSION})
+  message(AUTHOR_WARNING "version passed in (${CURL_VER}) doesn't match internal version (${CURL_VERSION})")
+endif()
+set(ver _${CURL_VER})
+set(verDir /curl${ver})
+
 add_subdirectory(lib)
 if(BUILD_CURL_EXE)
   add_subdirectory(src)
@@ -1110,8 +1150,8 @@ set(CURLVERSION             "${CURL_VERSION}")
 set(ENABLE_SHARED           "yes")
 if(CURL_STATICLIB)
   # Broken: LIBCURL_LIBS below; .a lib is not built
-  message(WARNING "Static linking is broken!")
-  set(ENABLE_STATIC         "no")
+  #message(WARNING "Static linking is broken!")
+  set(ENABLE_STATIC         "yes")
 else()
   set(ENABLE_STATIC         "no")
 endif()
@@ -1133,21 +1173,27 @@ set(REQUIRE_LIB_DEPS        "no")
 # SUPPORT_PROTOCOLS
 set(VERSIONNUM              "${CURL_VERSION_NUM}")
 
+option(INSTALL_CURL_CONFIG "Set to ON to install cURL config (curl-config and pkg-config libcurl.pc)." ON)
+
 # Finally generate a "curl-config" matching this config
 configure_file("${CURL_SOURCE_DIR}/curl-config.in"
                "${CURL_BINARY_DIR}/curl-config" @ONLY)
+if(INSTALL_CURL_CONFIG)
 install(FILES "${CMAKE_BINARY_DIR}/curl-config"
         DESTINATION bin
         PERMISSIONS
           OWNER_READ OWNER_WRITE OWNER_EXECUTE
           GROUP_READ GROUP_EXECUTE
           WORLD_READ WORLD_EXECUTE)
+endif()
 
 # Finally generate a pkg-config file matching this config
 configure_file("${CURL_SOURCE_DIR}/libcurl.pc.in"
                "${CURL_BINARY_DIR}/libcurl.pc" @ONLY)
+if(INSTALL_CURL_CONFIG)
 install(FILES "${CMAKE_BINARY_DIR}/libcurl.pc"
         DESTINATION lib/pkgconfig)
+endif()
 
 # This needs to be run very last so other parts of the scripts can take advantage of this.
 if(NOT CURL_CONFIG_HAS_BEEN_RUN_BEFORE)
@@ -1157,10 +1203,10 @@ endif()
 # Installation.
 # First, install generated curlbuild.h
 install(FILES "${CMAKE_CURRENT_BINARY_DIR}/include/curl/curlbuild.h"
-    DESTINATION include/curl )
+    DESTINATION include${verDir}/curl )
 # Next, install other headers excluding curlbuild.h
 install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include/curl"
-    DESTINATION include
+    DESTINATION include${verDir}
     FILES_MATCHING PATTERN "*.h"
     PATTERN "curlbuild.h" EXCLUDE)
 
diff --git a/include/curl/curl.h b/include/curl/curl.h
index ae1b0e4db..aad497433 100644
--- a/include/curl/curl.h
+++ b/include/curl/curl.h
@@ -179,7 +179,7 @@ typedef int (*curl_xferinfo_callback)(void *clientp,
      time for those who feel adventurous. The practical minimum is about
      400 bytes since libcurl uses a buffer of this size as a scratch area
      (unrelated to network send operations). */
-#define CURL_MAX_WRITE_SIZE 16384
+#define CURL_MAX_WRITE_SIZE 524288 /* = 32 * 16384 (the default) */
 #endif
 
 #ifndef CURL_MAX_HTTP_HEADER
diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index 49a340938..5fe65a843 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -98,7 +98,11 @@ if(WIN32)
   endif()
 endif()
 
-install(TARGETS ${LIB_NAME}
+set_target_properties(${LIB_NAME} PROPERTIES OUTPUT_NAME ${LIB_NAME}${ver})
+set(targetsFile ${LIB_NAME}${ver}-targets)
+
+install(TARGETS ${LIB_NAME} EXPORT ${targetsFile}
   ARCHIVE DESTINATION lib
   LIBRARY DESTINATION lib
   RUNTIME DESTINATION bin)
+install(EXPORT ${targetsFile} DESTINATION lib/cmake)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index bfb866bd9..7304c8ee3 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -71,8 +71,11 @@ target_link_libraries( ${EXE_NAME} libcurl ${CURL_LIBS})
 
 # Add the postfix to the executable since it is not added automatically as for modules and shared libraries
 set_target_properties(${EXE_NAME} PROPERTIES
+  OUTPUT_NAME ${EXE_NAME}${ver}
   DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
 
 #INCLUDE(ModuleInstall OPTIONAL)
 
-install(TARGETS ${EXE_NAME} DESTINATION bin)
+set(targetsFile ${EXE_NAME}${ver}-targets)
+install(TARGETS ${EXE_NAME} EXPORT ${targetsFile} DESTINATION bin CONFIGURATIONS Release)
+install(EXPORT ${targetsFile} DESTINATION bin/cmake CONFIGURATIONS Release)
