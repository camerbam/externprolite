diff --git a/CMakeLists.txt b/CMakeLists.txt
index 77a591f8d..9e92472d7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,6 +20,7 @@ SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Mo
 INCLUDE(CheckLibraryExists)
 INCLUDE(AddCFlagIfSupported)
 INCLUDE(FindPkgConfig)
+INCLUDE(flags OPTIONAL)
 
 # Build options
 #
@@ -39,6 +40,14 @@ OPTION( USE_ICONV			"Link with and use iconv library" 		OFF )
 OPTION( USE_SSH				"Link with libssh to enable SSH support" ON )
 OPTION( USE_GSSAPI			"Link with libgssapi for SPNEGO auth"   OFF )
 OPTION( VALGRIND			"Configure build for valgrind"			OFF )
+OPTION( OPENSSL_MODULE_PATH		"Find OpenSSL in CMAKE_MODULE_PATH"			OFF )
+OPTION( ZLIB_MODULE_PATH		"Find zlib in CMAKE_MODULE_PATH"			OFF )
+OPTION( LIBSSH2_MODULE_PATH		"Find libssh2 in CMAKE_MODULE_PATH"			OFF )
+OPTION( INSTALL_LIBGIT2_CONFIG		"Install libgit2 config (pkg-config libgit2.pc)"	ON )
+MARK_AS_ADVANCED( OPENSSL_MODULE_PATH )
+MARK_AS_ADVANCED( ZLIB_MODULE_PATH )
+MARK_AS_ADVANCED( LIBSSH2_MODULE_PATH )
+MARK_AS_ADVANCED( INSTALL_LIBGIT2_CONFIG )
 
 IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
 	SET( USE_ICONV ON )
@@ -56,6 +65,8 @@ IF(MSVC)
 	# This option must match the settings used in your program, in particular if you
 	# are linking statically
 	OPTION( STATIC_CRT		"Link the static CRT libraries"	ON  )
+	OPTION( SKIP_MSVC_FLAGS		"Skip MSVC flags set here"	OFF  )
+	MARK_AS_ADVANCED( SKIP_MSVC_FLAGS )
 
 	# By default, libgit2 is built with WinHTTP.  To use the built-in
 	# HTTP transport, invoke CMake with the "-DWINHTTP=OFF" argument.
@@ -79,12 +90,6 @@ SET(LIBGIT2_PC_REQUIRES "")
 # pc file.
 SET(LIBGIT2_PC_LIBS "")
 
-# Installation paths
-#
-SET(BIN_INSTALL_DIR bin CACHE PATH "Where to install binaries to.")
-SET(LIB_INSTALL_DIR lib CACHE PATH "Where to install libraries to.")
-SET(INCLUDE_INSTALL_DIR include CACHE PATH "Where to install headers to.")
-
 FUNCTION(TARGET_OS_LIBRARIES target)
 	IF(WIN32)
 		TARGET_LINK_LIBRARIES(${target} ws2_32)
@@ -152,7 +157,11 @@ IF (WIN32 AND WINHTTP AND NOT MINGW)
 	FILE(GLOB SRC_HTTP deps/http-parser/*.c deps/http-parser/*.h)
 ELSE ()
 	IF (NOT AMIGA)
-		FIND_PACKAGE(OpenSSL)
+		IF(OPENSSL_MODULE_PATH)
+			FIND_PACKAGE(usexp-OpenSSL PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+		ELSE()
+			FIND_PACKAGE(OpenSSL)
+		ENDIF()
 	ENDIF ()
 
 	FIND_PACKAGE(HTTP_Parser)
@@ -196,7 +205,11 @@ IF(WIN32 OR AMIGA OR ANDROID OR CMAKE_SYSTEM_NAME MATCHES "(Solaris|SunOS)")
 ENDIF()
 
 # Optional external dependency: zlib
-FIND_PACKAGE(ZLIB)
+IF(ZLIB_MODULE_PATH)
+	FIND_PACKAGE(usexp-ZLIB PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+ELSE()
+	FIND_PACKAGE(ZLIB)
+ENDIF()
 IF (ZLIB_FOUND)
 	INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})
 	LINK_LIBRARIES(${ZLIB_LIBRARIES})
@@ -214,7 +227,11 @@ ENDIF()
 
 # Optional external dependency: libssh2
 IF (USE_SSH)
-	PKG_CHECK_MODULES(LIBSSH2 libssh2)
+	IF(LIBSSH2_MODULE_PATH)
+		FIND_PACKAGE(usexp-LIBSSH2 PATHS ${CMAKE_MODULE_PATH} NO_DEFAULT_PATH)
+	ELSE()
+		PKG_CHECK_MODULES(LIBSSH2 libssh2)
+	ENDIF()
 ENDIF()
 IF (LIBSSH2_FOUND)
 	ADD_DEFINITIONS(-DGIT_SSH)
@@ -244,6 +261,7 @@ ENDIF()
 
 # Platform specific compilation flags
 IF (MSVC)
+	IF(NOT SKIP_MSVC_FLAGS)
 
 	STRING(REPLACE "/Zm1000" " " CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
 
@@ -310,6 +328,8 @@ IF (MSVC)
 	SET(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
 	SET(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL}")
 
+	ENDIF() # SKIP_MSVC_FLAGS
+
 	SET(WIN_RC "src/win32/git2.rc")
 
    # Precompiled headers
@@ -407,6 +427,18 @@ ELSE()
 	MESSAGE(FATAL_ERROR "Unsupported architecture")
 ENDIF()
 
+IF(DEFINED LIBGIT2_VER)
+  SET(ver _${LIBGIT2_VER})
+  SET(verDir /${PROJECT_NAME}${ver})
+  SET(LIBGIT2_FILENAME git2${ver})
+ENDIF()
+
+# Installation paths
+#
+SET(BIN_INSTALL_DIR bin CACHE PATH "Where to install binaries to.")
+SET(LIB_INSTALL_DIR lib CACHE PATH "Where to install libraries to.")
+SET(INCLUDE_INSTALL_DIR include${verDir} CACHE PATH "Where to install headers to.")
+
 # Compile and link libgit2
 ADD_LIBRARY(git2 ${SRC_H} ${SRC_GIT2} ${SRC_OS} ${SRC_ZLIB} ${SRC_HTTP} ${SRC_REGEX} ${SRC_SSH} ${SRC_SHA1} ${WIN_RC})
 TARGET_LINK_LIBRARIES(git2 ${SSL_LIBRARIES})
@@ -440,14 +472,18 @@ IF (MSVC_IDE)
 ENDIF ()
 
 # Install
-INSTALL(TARGETS git2
+SET(targetsFile ${PROJECT_NAME}${ver}-targets)
+INSTALL(TARGETS git2 EXPORT ${targetsFile}
 	RUNTIME DESTINATION ${BIN_INSTALL_DIR}
 	LIBRARY DESTINATION ${LIB_INSTALL_DIR}
 	ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
 )
+IF(INSTALL_LIBGIT2_CONFIG)
 INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/libgit2.pc DESTINATION ${LIB_INSTALL_DIR}/pkgconfig )
+ENDIF()
 INSTALL(DIRECTORY include/git2 DESTINATION ${INCLUDE_INSTALL_DIR} )
 INSTALL(FILES include/git2.h DESTINATION ${INCLUDE_INSTALL_DIR} )
+INSTALL(EXPORT ${targetsFile} DESTINATION ${LIB_INSTALL_DIR}/cmake )
 
 # Tests
 IF (BUILD_CLAR)
diff --git a/include/git2/common.h b/include/git2/common.h
index d84a76512..a8177ddac 100644
--- a/include/git2/common.h
+++ b/include/git2/common.h
@@ -10,7 +10,7 @@
 #include <time.h>
 #include <stdlib.h>
 
-#ifdef _MSC_VER
+#if defined(_MSC_VER) && _MSC_VER < 1800
 #	include "inttypes.h"
 #else
 #	include <inttypes.h>
diff --git a/src/win32/posix.h b/src/win32/posix.h
index 104966edc..9ac78430b 100644
--- a/src/win32/posix.h
+++ b/src/win32/posix.h
@@ -41,7 +41,7 @@ extern int p_chdir(const char* path);
 extern int p_chmod(const char* path, mode_t mode);
 extern int p_rmdir(const char* path);
 extern int p_access(const char* path, mode_t mode);
-extern int p_ftruncate(int fd, long size);
+extern int p_ftruncate(int fd, git_off_t size);
 
 /* p_lstat is almost but not quite POSIX correct.  Specifically, the use of
  * ENOTDIR is wrong, in that it does not mean precisely that a non-directory
diff --git a/src/win32/posix_w32.c b/src/win32/posix_w32.c
index 346f537e4..ad3f985bb 100644
--- a/src/win32/posix_w32.c
+++ b/src/win32/posix_w32.c
@@ -36,12 +36,28 @@
 /* GetFinalPathNameByHandleW signature */
 typedef DWORD(WINAPI *PFGetFinalPathNameByHandleW)(HANDLE, LPWSTR, DWORD, DWORD);
 
-int p_ftruncate(int fd, long size)
+/**
+ * Truncate or extend file.
+ *
+ * We now take a "git_off_t" rather than "long" because
+ * files may be longer than 2Gb.
+ */
+int p_ftruncate(int fd, git_off_t size)
 {
-#if defined(_MSC_VER) && _MSC_VER >= 1500
-	return _chsize_s(fd, size);
+	if (size < 0) {
+		errno = EINVAL;
+		return -1;
+	}
+
+#if !defined(__MINGW32__)
+	return ((_chsize_s(fd, size) == 0) ? 0 : -1);
 #else
-	return _chsize(fd, size);
+	/* TODO MINGW32 Find a replacement for _chsize() that handles big files. */
+	if (size > INT32_MAX) {
+		errno = EFBIG;
+		return -1;
+	}
+	return _chsize(fd, (long)size);
 #endif
 }
 
diff --git a/tests/core/ftruncate.c b/tests/core/ftruncate.c
new file mode 100644
index 000000000..21981d677
--- /dev/null
+++ b/tests/core/ftruncate.c
@@ -0,0 +1,48 @@
+/**
+ * Some tests for p_ftruncate() to ensure that
+ * properly handles large (2Gb+) files.
+ */
+
+#include "clar_libgit2.h"
+
+static const char *filename = "core_ftruncate.txt";
+static int fd = -1;
+
+void test_core_ftruncate__initialize(void)
+{
+	if (!cl_getenv("GITTEST_INVASIVE_FS_SIZE"))
+		cl_skip();
+
+	cl_must_pass((fd = p_open(filename, O_CREAT | O_RDWR, 0644)));
+}
+
+void test_core_ftruncate__cleanup(void)
+{
+	if (fd < 0)
+		return;
+
+	p_close(fd);
+	fd = 0;
+
+	p_unlink(filename);
+}
+
+static void _extend(git_off_t i64len)
+{
+	struct stat st;
+	int error;
+
+	cl_assert((error = p_ftruncate(fd, i64len)) == 0);
+	cl_assert((error = p_fstat(fd, &st)) == 0);
+	cl_assert(st.st_size == i64len);
+}
+
+void test_core_ftruncate__2gb(void)
+{
+	_extend(0x80000001);
+}
+
+void test_core_ftruncate__4gb(void)
+{
+	_extend(0x100000001);
+}
